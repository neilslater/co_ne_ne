RuNeNe TODOs:

    Completely re-architect layer/network
      layer_ff consists solely of num_inputs, num_outputs, weights, transfer function
       - all processing uses supplied params, not internal state
      network adds architecture (initially just a stack of layers)
      trainer adds data structures for tracking weight deltas etc

    Make a trainer class: RuNeNe::Trainer::Backprop

    Perform batch feed-forward runs

    Perform batch backprop runs

    Re-do backprop into separate dE_da, dE_dz and dE_dW stages

    Gradient-checking tests

    Separate out cost/loss functions

    Layer init weights

    Log loss cost

    Tests using MNIST digits

    mini-batch training

    Softmax layer


----- v0.0.1 release ?

    Optionally take writable output array (for performance)

    improved vectorisation

    Bulk predictions

    Training set normalisation

    Training set split (into CV, Test etc)

    dropout

    max norm regularisation

    l2 regularisation?

    rmsprop

    dynamic learning rate?

    auto-categorisation and category expansion

    training data auto-shuffle

    Residual gradients for RELU (& others?)

    Use SIMD for weight updates

    Holdout sets for generalisation

    Layer.clear_input (?)

    auto-encoders

    Import other NN trained models (cxxnet, caffe)

RuNeNe DONE:

    Training data shuffled inputs/outputs

    Training data Marshal

    Linear neurons

    Lock first layer in network, to prevent adding earlier layers

    Factor training cycle et al to struct_mlp_network

    Clone a network

    Fill starting NArrays with 0.0

    Init network from first layer

    Init network from array of layers (in Ruby)

    Marshalling, for layers and network

    Learning rate and momentum for network

    YARD docs

    Don't return ms_error on normal training

    Add training data class

    Fisher-Yates shuffle

    srand accept arrays