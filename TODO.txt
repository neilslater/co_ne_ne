RuNeNe TODOs:

    Variable names:
        rv_foo    for Ruby values
        foo       for struct pointers

    Finish training data class

    Finish trainer class. RuNeNe::Trainer::Backprop

    Split training process between  network, training data and a "trainer" class

    Re-do backprop into separate dE_da, dE_dz and dE_dW stages

    Gradient-checking tests


    Layer init weights

    Log loss cost

    Tests using MNIST digits

    mini-batch training

    Softmax layer


----- v0.0.1 release ?


    improved vectorisation

    Bulk predictions

    Training set normalisation

    dropout

    max norm regularisation

    l2 regularisation?

    rmsprop

    dynamic learning rate?

    auto-categorisation and category expansion

    training data auto-shuffle

    Residual gradients for RELU (& others?)

    ---- Start from here in 2014 ??? ---

    Use SIMD for weight updates

    Holdout sets for generalisation

    Layer.clear_input (?)

    auto-encoders


RuNeNe DONE:

    Training data Marshal

    Linear neurons

    Lock first layer in network, to prevent adding earlier layers

    Factor training cycle et al to struct_mlp_network

    Clone a network

    Fill starting NArrays with 0.0

    Init network from first layer

    Init network from array of layers (in Ruby)

    Marshalling, for layers and network

    Learning rate and momentum for network

    YARD docs

    Don't return ms_error on normal training

    Add training data class

    Fisher-Yates shuffle

    srand accept arrays